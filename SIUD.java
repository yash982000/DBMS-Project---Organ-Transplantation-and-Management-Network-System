/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbms;

import java.awt.Color;
import java.awt.GridLayout;
import java.sql.Array;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author VARSHIL
 */
public class SIUD extends javax.swing.JFrame {
int flag_register=0;
    /**
     * Creates new form SIUD
     */
    public SIUD() {
        initComponents();
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
           get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
//        recover_button.setVisible(false);
        get_waitinglist_city_based_done_button1.setVisible(false);
        
        get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    }StringBuffer sb=new StringBuffer();
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        add_death_to_user = new javax.swing.JButton();
        get_doctor_transaction_count_button = new javax.swing.JButton();
        get_doctor_transaction_count_ins = new javax.swing.JButton();
        get_failure_organwise_button = new javax.swing.JButton();
        get_organ_available_count_citywise_button = new javax.swing.JButton();
        get_waitinglist_city_based_button = new javax.swing.JButton();
        get_waitinglist_button = new javax.swing.JButton();
        get_graphs = new javax.swing.JButton();
        get_success_organwise_button = new javax.swing.JButton();
        get_patient_list_ins_button = new javax.swing.JButton();
        get_patient_list_ins_city_label = new javax.swing.JLabel();
        get_patient_list_ins_orgrequired_label = new javax.swing.JLabel();
        get_patient_list_ins_city_textfield = new javax.swing.JTextField();
        get_patient_list_ins_orgrequired_textfield = new javax.swing.JTextField();
        get_user_city_based_label = new javax.swing.JLabel();
        get_waitinglist_city_based_label = new javax.swing.JLabel();
        get_user_city_based_textfield = new javax.swing.JTextField();
        get_waitinglist_city_based_textfield = new javax.swing.JTextField();
        get_all_transaction_city_label = new javax.swing.JLabel();
        get_organ_available_count_citywise_label = new javax.swing.JLabel();
        get_organ_available_count_citywise_textfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        get_transactions_city_done_button = new javax.swing.JButton();
        get_organ_available_count_citywise_done_button = new javax.swing.JButton();
        get_user_city_based_done_button = new javax.swing.JButton();
        get_patient_city_based_done_button = new javax.swing.JButton();
        get_waitinglist_all_button = new javax.swing.JButton();
        recover_button = new javax.swing.JButton();
        get_transactions_city_textfield = new javax.swing.JTextField();
        get_doctor_transaction_count_all1 = new javax.swing.JButton();
        get_waitinglist_city_based_done_button1 = new javax.swing.JButton();
        get_user_city_based_button1 = new javax.swing.JButton();
        get_graphs_success = new javax.swing.JButton();
        get_graphs_failure = new javax.swing.JButton();
        add_new_user_from_death = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        get_success_organizationwise_button = new javax.swing.JButton();
        get_failure_organizationwise_button = new javax.swing.JButton();
        get_death_records = new javax.swing.JButton();
        get_graphs_demand = new javax.swing.JButton();
        get_graphs_supply = new javax.swing.JButton();
        get_graphs_svd = new javax.swing.JButton();
        register_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Insert.jpg")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Delete.jpg")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 102, 102));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Insert");

        jLabel3.setBackground(new java.awt.Color(0, 102, 102));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Delete");

        jLabel4.setBackground(new java.awt.Color(0, 102, 102));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Search and update");

        jButton5.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Insert.jpg")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(0, 102, 102));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Insert");

        add_death_to_user.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        add_death_to_user.setText("Add To Deathlist");
        add_death_to_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_death_to_userActionPerformed(evt);
            }
        });

        get_doctor_transaction_count_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_doctor_transaction_count_button.setText("Get Doctor Transaction Count");
        get_doctor_transaction_count_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_doctor_transaction_count_buttonActionPerformed(evt);
            }
        });

        get_doctor_transaction_count_ins.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_doctor_transaction_count_ins.setText("DOCTOR NAME");
        get_doctor_transaction_count_ins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_doctor_transaction_count_insActionPerformed(evt);
            }
        });

        get_failure_organwise_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_failure_organwise_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Failure.jpg")); // NOI18N
        get_failure_organwise_button.setText("Get Failure Organwise");
        get_failure_organwise_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_failure_organwise_buttonActionPerformed(evt);
            }
        });

        get_organ_available_count_citywise_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_organ_available_count_citywise_button.setText("Get Organ Available Count");
        get_organ_available_count_citywise_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_organ_available_count_citywise_buttonActionPerformed(evt);
            }
        });

        get_waitinglist_city_based_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_waitinglist_city_based_button.setText("Get Waiting List CITY BASED");
        get_waitinglist_city_based_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_waitinglist_city_based_buttonActionPerformed(evt);
            }
        });

        get_waitinglist_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_waitinglist_button.setText("Get Waiting List ");
        get_waitinglist_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_waitinglist_buttonActionPerformed(evt);
            }
        });

        get_graphs.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_graphs.setText("GRAPHS");
        get_graphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_graphsActionPerformed(evt);
            }
        });

        get_success_organwise_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_success_organwise_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Success.jpg")); // NOI18N
        get_success_organwise_button.setText("Get SuccessOrganwise ");
        get_success_organwise_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_success_organwise_buttonActionPerformed(evt);
            }
        });

        get_patient_list_ins_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_patient_list_ins_button.setText("Get Patient City Based");
        get_patient_list_ins_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_patient_list_ins_buttonActionPerformed(evt);
            }
        });

        get_patient_list_ins_city_label.setBackground(new java.awt.Color(0, 102, 102));
        get_patient_list_ins_city_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_patient_list_ins_city_label.setForeground(new java.awt.Color(255, 255, 255));
        get_patient_list_ins_city_label.setText("CITY");

        get_patient_list_ins_orgrequired_label.setBackground(new java.awt.Color(0, 102, 102));
        get_patient_list_ins_orgrequired_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_patient_list_ins_orgrequired_label.setForeground(new java.awt.Color(255, 255, 255));
        get_patient_list_ins_orgrequired_label.setText("ORGAN REQUIRED");

        get_patient_list_ins_city_textfield.setBackground(new java.awt.Color(0, 102, 102));
        get_patient_list_ins_city_textfield.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_patient_list_ins_city_textfield.setForeground(new java.awt.Color(255, 255, 255));

        get_patient_list_ins_orgrequired_textfield.setBackground(new java.awt.Color(0, 102, 102));
        get_patient_list_ins_orgrequired_textfield.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_patient_list_ins_orgrequired_textfield.setForeground(new java.awt.Color(255, 255, 255));

        get_user_city_based_label.setBackground(new java.awt.Color(0, 102, 102));
        get_user_city_based_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_user_city_based_label.setForeground(new java.awt.Color(255, 255, 255));
        get_user_city_based_label.setText("CITY");

        get_waitinglist_city_based_label.setBackground(new java.awt.Color(0, 102, 102));
        get_waitinglist_city_based_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_waitinglist_city_based_label.setForeground(new java.awt.Color(255, 255, 255));
        get_waitinglist_city_based_label.setText("CITY");

        get_user_city_based_textfield.setBackground(new java.awt.Color(0, 102, 102));
        get_user_city_based_textfield.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_user_city_based_textfield.setForeground(new java.awt.Color(255, 255, 255));

        get_waitinglist_city_based_textfield.setBackground(new java.awt.Color(0, 102, 102));
        get_waitinglist_city_based_textfield.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_waitinglist_city_based_textfield.setForeground(new java.awt.Color(255, 255, 255));

        get_all_transaction_city_label.setBackground(new java.awt.Color(0, 102, 102));
        get_all_transaction_city_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_all_transaction_city_label.setForeground(new java.awt.Color(255, 255, 255));
        get_all_transaction_city_label.setText("DOCTOR NAME");

        get_organ_available_count_citywise_label.setBackground(new java.awt.Color(0, 102, 102));
        get_organ_available_count_citywise_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_organ_available_count_citywise_label.setForeground(new java.awt.Color(255, 255, 255));
        get_organ_available_count_citywise_label.setText("CITY");

        get_organ_available_count_citywise_textfield.setBackground(new java.awt.Color(0, 102, 102));
        get_organ_available_count_citywise_textfield.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_organ_available_count_citywise_textfield.setForeground(new java.awt.Color(255, 255, 255));

        jTable2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        get_transactions_city_done_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_transactions_city_done_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Done (1).jpg")); // NOI18N
        get_transactions_city_done_button.setText("Done");
        get_transactions_city_done_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_transactions_city_done_buttonActionPerformed(evt);
            }
        });

        get_organ_available_count_citywise_done_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_organ_available_count_citywise_done_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Done (1).jpg")); // NOI18N
        get_organ_available_count_citywise_done_button.setText("Done");
        get_organ_available_count_citywise_done_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_organ_available_count_citywise_done_buttonActionPerformed(evt);
            }
        });

        get_user_city_based_done_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_user_city_based_done_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Done.jpg")); // NOI18N
        get_user_city_based_done_button.setText("Done");
        get_user_city_based_done_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_user_city_based_done_buttonActionPerformed(evt);
            }
        });

        get_patient_city_based_done_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_patient_city_based_done_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Done (1).jpg")); // NOI18N
        get_patient_city_based_done_button.setText("Done");
        get_patient_city_based_done_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_patient_city_based_done_buttonActionPerformed(evt);
            }
        });

        get_waitinglist_all_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_waitinglist_all_button.setText("ALL PATIENT");
        get_waitinglist_all_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_waitinglist_all_buttonActionPerformed(evt);
            }
        });

        recover_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        recover_button.setText("RECOVER DATA");
        recover_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recover_buttonActionPerformed(evt);
            }
        });

        get_transactions_city_textfield.setBackground(new java.awt.Color(0, 102, 102));
        get_transactions_city_textfield.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        get_transactions_city_textfield.setForeground(new java.awt.Color(255, 255, 255));

        get_doctor_transaction_count_all1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_doctor_transaction_count_all1.setText("ALL TRANSACTIONS");
        get_doctor_transaction_count_all1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_doctor_transaction_count_all1ActionPerformed(evt);
            }
        });

        get_waitinglist_city_based_done_button1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_waitinglist_city_based_done_button1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Done (1).jpg")); // NOI18N
        get_waitinglist_city_based_done_button1.setText("Done");
        get_waitinglist_city_based_done_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_waitinglist_city_based_done_button1ActionPerformed(evt);
            }
        });

        get_user_city_based_button1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_user_city_based_button1.setText("Get User City Based");
        get_user_city_based_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_user_city_based_button1ActionPerformed(evt);
            }
        });

        get_graphs_success.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_graphs_success.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Success.jpg")); // NOI18N
        get_graphs_success.setText("SUCCESS");
        get_graphs_success.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_graphs_successActionPerformed(evt);
            }
        });

        get_graphs_failure.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_graphs_failure.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Failure.jpg")); // NOI18N
        get_graphs_failure.setText("FAILURE");
        get_graphs_failure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_graphs_failureActionPerformed(evt);
            }
        });

        add_new_user_from_death.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        add_new_user_from_death.setText("Add new user from death");
        add_new_user_from_death.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_new_user_from_deathActionPerformed(evt);
            }
        });

        logout.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        logout.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Logout.jpg")); // NOI18N
        logout.setText("logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        get_success_organizationwise_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_success_organizationwise_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Success.jpg")); // NOI18N
        get_success_organizationwise_button.setText("Get SuccessOrganizationwise ");
        get_success_organizationwise_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_success_organizationwise_buttonActionPerformed(evt);
            }
        });

        get_failure_organizationwise_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_failure_organizationwise_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Failure.jpg")); // NOI18N
        get_failure_organizationwise_button.setText("Get Failure Organizationwise");
        get_failure_organizationwise_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_failure_organizationwise_buttonActionPerformed(evt);
            }
        });

        get_death_records.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_death_records.setText("GET DEATH RECORDS");
        get_death_records.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_death_recordsActionPerformed(evt);
            }
        });

        get_graphs_demand.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_graphs_demand.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Success.jpg")); // NOI18N
        get_graphs_demand.setText("DEMAND");
        get_graphs_demand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_graphs_demandActionPerformed(evt);
            }
        });

        get_graphs_supply.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_graphs_supply.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Failure.jpg")); // NOI18N
        get_graphs_supply.setText("SUPPLY");
        get_graphs_supply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_graphs_supplyActionPerformed(evt);
            }
        });

        get_graphs_svd.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        get_graphs_svd.setIcon(new javax.swing.ImageIcon("C:\\Users\\Admin\\Desktop\\images\\Success.jpg")); // NOI18N
        get_graphs_svd.setText("SUPPLY AND DEMAND");
        get_graphs_svd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_graphs_svdActionPerformed(evt);
            }
        });

        register_button.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        register_button.setText("GET REGISTER DETAILS");
        register_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                register_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(get_doctor_transaction_count_button)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(424, 424, 424)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(add_death_to_user)
                                            .addComponent(add_new_user_from_death))
                                        .addGap(150, 150, 150)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(100, 100, 100)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(120, 120, 120)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(153, 153, 153)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel2)
                                        .addGap(179, 179, 179)
                                        .addComponent(jLabel5)
                                        .addGap(210, 210, 210)
                                        .addComponent(jLabel3))))
                            .addComponent(get_success_organizationwise_button)
                            .addComponent(get_death_records, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(156, 156, 156)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(get_patient_list_ins_button)
                                    .addComponent(get_patient_list_ins_city_label)
                                    .addComponent(get_waitinglist_button)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(get_patient_list_ins_orgrequired_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(get_patient_list_ins_orgrequired_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(get_patient_list_ins_city_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(get_patient_city_based_done_button)
                            .addComponent(logout))
                        .addGap(192, 192, 192))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(get_organ_available_count_citywise_label)
                                .addGap(83, 83, 83)
                                .addComponent(get_organ_available_count_citywise_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86)
                                .addComponent(get_organ_available_count_citywise_done_button))
                            .addComponent(get_failure_organwise_button)
                            .addComponent(get_organ_available_count_citywise_button)
                            .addComponent(get_success_organwise_button))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(get_user_city_based_label)
                                .addGap(83, 83, 83)
                                .addComponent(get_user_city_based_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(320, 320, 320))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(get_waitinglist_city_based_label)
                                .addGap(77, 77, 77)
                                .addComponent(get_waitinglist_city_based_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(425, 425, 425))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(get_all_transaction_city_label)
                        .addGap(103, 103, 103)
                        .addComponent(get_transactions_city_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(get_transactions_city_done_button)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(get_graphs_demand)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(get_user_city_based_done_button)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(get_graphs)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(get_graphs_supply)))
                                .addGap(167, 167, 167))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(get_graphs_svd)
                                .addGap(518, 518, 518))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(get_failure_organizationwise_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(get_waitinglist_city_based_button)
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(register_button)
                            .addComponent(get_waitinglist_all_button))
                        .addGap(143, 143, 143))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(get_doctor_transaction_count_ins)
                .addGap(49, 49, 49)
                .addComponent(get_doctor_transaction_count_all1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(get_graphs_success)
                .addGap(70, 70, 70)
                .addComponent(get_graphs_failure)
                .addGap(247, 247, 247))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(recover_button)
                        .addGap(469, 469, 469))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(get_user_city_based_button1)
                        .addGap(260, 260, 260))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(621, 621, 621)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(734, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(1526, Short.MAX_VALUE)
                    .addComponent(get_waitinglist_city_based_done_button1)
                    .addGap(507, 507, 507)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel2))
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(add_death_to_user)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(get_patient_list_ins_button)
                                                .addGap(23, 23, 23)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(get_patient_list_ins_city_label)
                                                    .addComponent(get_patient_list_ins_city_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(17, 17, 17)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_patient_list_ins_orgrequired_label)
                                    .addComponent(get_patient_list_ins_orgrequired_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(logout)
                                .addGap(64, 64, 64)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_patient_city_based_done_button)
                                    .addComponent(add_new_user_from_death))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(get_death_records)))
                        .addGap(13, 13, 13)
                        .addComponent(get_doctor_transaction_count_button)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_graphs)
                                    .addComponent(get_graphs_demand)
                                    .addComponent(get_graphs_supply))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_graphs_success)
                                    .addComponent(get_graphs_failure))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(get_graphs_svd)
                                .addGap(2, 2, 2)
                                .addComponent(get_user_city_based_button1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_user_city_based_label)
                                    .addComponent(get_user_city_based_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(get_user_city_based_done_button)
                                .addGap(15, 15, 15))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(get_doctor_transaction_count_ins)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(get_doctor_transaction_count_all1)
                                        .addGap(27, 27, 27)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_transactions_city_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(get_all_transaction_city_label)
                                    .addComponent(get_transactions_city_done_button))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                                .addComponent(get_success_organwise_button)
                                .addGap(18, 18, 18)
                                .addComponent(get_success_organizationwise_button)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(get_failure_organwise_button))
                            .addComponent(get_waitinglist_button))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(get_waitinglist_all_button)
                                    .addComponent(get_waitinglist_city_based_button)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(get_failure_organizationwise_button)))
                        .addGap(60, 60, 60)
                        .addComponent(get_organ_available_count_citywise_button)
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(get_organ_available_count_citywise_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(get_organ_available_count_citywise_label))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(get_organ_available_count_citywise_done_button)))
                        .addGap(19, 19, 19))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(get_waitinglist_city_based_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(get_waitinglist_city_based_label)
                            .addComponent(register_button))
                        .addGap(139, 139, 139)))
                .addComponent(recover_button)
                .addGap(90, 90, 90))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(203, 203, 203)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(204, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(829, Short.MAX_VALUE)
                    .addComponent(get_waitinglist_city_based_done_button1)
                    .addGap(166, 166, 166)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//  JOptionPane.showMessageDialog(null, "LOGIN SUCCESSFULL");
flag_register=0;  
try {
            //                jTextField4.setText("Welcome");
            //  System.out.println(user);
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SIUD.class.getName()).log(Level.SEVERE, null, ex);
        }
                 this.dispose();
                 
              // new projectjava.LoginPage.c1();
               new dbms.Search_Screen_final1_admin().setVisible(true);        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton1ActionPerformed

 void logServerOutput_get_doctor_transaction_count(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           String[] arrOfStr=temp.split("\n");

                            for(String a:arrOfStr){
                               sb.append(a).append(",");
                           }
                            
                            
//                           String c=arrOfStr[0].concat(",").concat(arrOfStr[1]).concat(",").concat(arrOfStr[2]).concat(",").concat(arrOfStr[3]).concat(",").concat(arrOfStr[4]).concat(",").concat(arrOfStr[5]);
//                               System.out.println("c"+c);
                         
//                           for (int i = 0; i < g-6; i=i+6) {
//                               String c=arrOfStr[i].concat(",").concat(arrOfStr[i+1]).concat(",").concat(arrOfStr[i+2]).concat(",").concat(arrOfStr[i+3]).concat(",").concat(arrOfStr[i+4]).concat(",").concat(arrOfStr[i+5]);
//                               System.out.println("c"+c);
//                           }
//                           String new_s[]=new String[8];
//System.out.println(temp);
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
//               System.out.println(Stream.of((Object[]) array.getArray(1,g-2)).count());
               Stream.of((Object[]) array.getArray(1,g-2))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
    private void get_doctor_transaction_count_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_doctor_transaction_count_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
            get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
   get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        
        get_doctor_transaction_count_all1.setVisible(true);
        get_doctor_transaction_count_ins.setVisible(true);
        
 // TODO add your handling code here:
    }//GEN-LAST:event_get_doctor_transaction_count_buttonActionPerformed

    private void get_transactions_city_done_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_transactions_city_done_buttonActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("DOCTOR NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DOCTOR DEPARTMENT");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("ORGANIZATION");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("HEART");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("PANCREAS");
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("INTESTINE");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("KIDNEY");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("LUNG");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=get_transactions_city_textfield.getText().toString();
    logServerOutput_get_doctor_transaction_count(conn, () -> 
        s.executeUpdate("begin  get_doctor_transaction_count_p('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
            for (int i = 0; i < split_coma.length-1; i=i+9) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7],split_coma[i+8]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_transactions_city_done_buttonActionPerformed

    private void get_doctor_transaction_count_all1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_doctor_transaction_count_all1ActionPerformed
flag_register=0;
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("DOCTOR NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DOCTOR DEPARTMENT");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("ORGANIZATION");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("HEART");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("PANCREAS");
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("INTESTINE");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("KIDNEY");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("LUNG");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_get_doctor_transaction_count(conn, () -> 
        s.executeUpdate("begin  get_doctor_transaction_count; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
            for (int i = 0; i < split_coma.length-1; i=i+9) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7],split_coma[i+8]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_doctor_transaction_count_all1ActionPerformed

 void logServerOutput_GET_FAILURE_ORGANWISE(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           String[] arrOfStr=temp.split("\n");

                            for(String a:arrOfStr){
                               sb.append(a).append(",");
                           }
                            
                            
//                           String c=arrOfStr[0].concat(",").concat(arrOfStr[1]).concat(",").concat(arrOfStr[2]).concat(",").concat(arrOfStr[3]).concat(",").concat(arrOfStr[4]).concat(",").concat(arrOfStr[5]);
//                               System.out.println("c"+c);
                         
//                           for (int i = 0; i < g-6; i=i+6) {
//                               String c=arrOfStr[i].concat(",").concat(arrOfStr[i+1]).concat(",").concat(arrOfStr[i+2]).concat(",").concat(arrOfStr[i+3]).concat(",").concat(arrOfStr[i+4]).concat(",").concat(arrOfStr[i+5]);
//                               System.out.println("c"+c);
//                           }
//                           String new_s[]=new String[8];
//System.out.println(temp);
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
//               System.out.println(Stream.of((Object[]) array.getArray(1,g-2)).count());
               Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
    private void get_failure_organwise_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_failure_organwise_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
       get_waitinglist_city_based_button.setVisible(false);
         get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
       get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        get_user_city_based_done_button.setVisible(false); DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("TOTAL");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("begin  GET_FAILURE_ORGANWISE; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4],split_coma[5]});
            
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_failure_organwise_buttonActionPerformed

 void logServerOutput_get_organ_available_count(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           String[] arrOfStr=temp.split("\n");

                            for(String a:arrOfStr){
                               sb.append(a).append(",");
                           }
                            
                            
//                           String c=arrOfStr[0].concat(",").concat(arrOfStr[1]).concat(",").concat(arrOfStr[2]).concat(",").concat(arrOfStr[3]).concat(",").concat(arrOfStr[4]).concat(",").concat(arrOfStr[5]);
//                               System.out.println("c"+c);
                         
//                           for (int i = 0; i < g-6; i=i+6) {
//                               String c=arrOfStr[i].concat(",").concat(arrOfStr[i+1]).concat(",").concat(arrOfStr[i+2]).concat(",").concat(arrOfStr[i+3]).concat(",").concat(arrOfStr[i+4]).concat(",").concat(arrOfStr[i+5]);
//                               System.out.println("c"+c);
//                           }
//                           String new_s[]=new String[8];
//System.out.println(temp);
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
//               System.out.println(Stream.of((Object[]) array.getArray(1,g-2)).count());
               Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
    private void get_organ_available_count_citywise_done_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_organ_available_count_citywise_done_buttonActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("HEART");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("PANCREAS");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("INTESTINE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("KIDNEY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("LUNG");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=get_organ_available_count_citywise_textfield.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_organ_available_count('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
             tm.addRow(new Object[]{value,split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4]});
            
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_organ_available_count_citywise_done_buttonActionPerformed

    private void get_patient_city_based_done_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_patient_city_based_done_buttonActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);//r_user.user_id||','||r_user.name||','||r_user.date_of_birth||','||r_user.medical_insurance||','||r_user.medical_history||','||r_user.street||','||r_user.city||','||r_user.state
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DATE OF BIRTH");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("MEDICAL INSRUANCE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("MEDICAL HISTORY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("STREET");                  
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("STATE");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("ORGAN REQUIRED");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value1=get_patient_list_ins_city_textfield.getText().toString();
            String value2=get_patient_list_ins_orgrequired_textfield.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_patient_city_based('"+value1+"','"+value2+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
             for (int i = 0; i < split_coma.length-1; i=i+9) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7],split_coma[i+8]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_patient_city_based_done_buttonActionPerformed

    private void get_success_organwise_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_success_organwise_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
       get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
    
        get_user_city_based_done_button.setVisible(false); DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("TOTAL");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("begin  GET_SUCCESS_ORGANWISE; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4],split_coma[5]});
            
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_success_organwise_buttonActionPerformed

    private void get_user_city_based_done_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_user_city_based_done_buttonActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                    jTable2.getColumnModel().getColumn(0).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DATE OF BIRTH");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("MEDICAL INSRUANCE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("MEDICAL HISTORY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("STREET");                  
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("STATE");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=get_user_city_based_textfield.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_user_city_based('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
     for (int i = 0; i < split_coma.length-1; i=i+8) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_user_city_based_done_buttonActionPerformed

    private void recover_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recover_buttonActionPerformed
flag_register=0;
        try {
            //                jTextField4.setText("Welcome");
            //  System.out.println(user);
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SIUD.class.getName()).log(Level.SEVERE, null, ex);
        }
                 this.dispose();
                 
              // new projectjava.LoginPage.c1();
               new dbms.Delete_Information().setVisible(true);        // TODO add your handling code here:

    }//GEN-LAST:event_recover_buttonActionPerformed

    private void get_waitinglist_all_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_waitinglist_all_buttonActionPerformed
flag_register=0;
DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();//'||r_patient.DOCTOR_ID||','||r_patient.USER_ID||','||r_patient.city
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("PATIENT ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("ORGAN REQUIRED");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("REASON");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("CITY");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
//            String value=jTextField6.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_waiting_patients; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
     for (int i = 0; i < split_coma.length-1; i=i+6) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
         // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_waitinglist_all_buttonActionPerformed

    private void get_doctor_transaction_count_insActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_doctor_transaction_count_insActionPerformed
flag_register=0;
        get_all_transaction_city_label.setVisible(true);
        get_transactions_city_textfield.setVisible(true);
        get_transactions_city_done_button.setVisible(true);
   get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        

        // TODO add your handling code here:
    }//GEN-LAST:event_get_doctor_transaction_count_insActionPerformed

    private void get_organ_available_count_citywise_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_organ_available_count_citywise_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        get_user_city_based_done_button.setVisible(false);
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
       get_waitinglist_city_based_button.setVisible(false);
         get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
           get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
//        recover_button.setVisible(false);
        
        
        get_organ_available_count_citywise_label.setVisible(true);
        get_organ_available_count_citywise_textfield.setVisible(true);
        get_organ_available_count_citywise_done_button.setVisible(true);
        
          // TODO add your handling code here:
    }//GEN-LAST:event_get_organ_available_count_citywise_buttonActionPerformed

    private void get_patient_list_ins_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_patient_list_ins_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        get_user_city_based_done_button.setVisible(false);
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
       get_waitinglist_city_based_button.setVisible(false);
         get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
           get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);    // TODO add your handling code here:
            
            get_patient_list_ins_city_label.setVisible(true);
        get_patient_list_ins_city_textfield.setVisible(true);
        get_patient_list_ins_orgrequired_label.setVisible(true);
        get_patient_list_ins_orgrequired_textfield.setVisible(true);
        get_patient_city_based_done_button.setVisible(true);
        
    }//GEN-LAST:event_get_patient_list_ins_buttonActionPerformed

    private void get_waitinglist_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_waitinglist_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        get_user_city_based_done_button.setVisible(false); 
   get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        get_waitinglist_all_button.setVisible(true);
        get_waitinglist_city_based_button.setVisible(true);
        
              



// TODO add your handling code here:
    }//GEN-LAST:event_get_waitinglist_buttonActionPerformed

    private void get_graphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_graphsActionPerformed
flag_register=0;

        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
    
        get_graphs_success.setVisible(true);
        get_graphs_failure.setVisible(true);
        
        get_graphs_demand.setVisible(true);
        get_graphs_supply.setVisible(true);
        get_graphs_svd.setVisible(true);
        get_user_city_based_done_button.setVisible(false); 
            // TODO add your handling code here:
    }//GEN-LAST:event_get_graphsActionPerformed

    private void get_waitinglist_city_based_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_waitinglist_city_based_buttonActionPerformed
flag_register=0;
get_waitinglist_city_based_done_button1.setVisible(true);
        get_waitinglist_city_based_label.setVisible(true);
        get_waitinglist_city_based_textfield.setVisible(true);
//        recover_button.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_get_waitinglist_city_based_buttonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
flag_register=0;
        try {
            //                jTextField4.setText("Welcome");
            //  System.out.println(user);
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SIUD.class.getName()).log(Level.SEVERE, null, ex);
        }
                 this.dispose();
                 
              // new projectjava.LoginPage.c1();
               new dbms.Insert_Screen().setVisible(true);        // TODO add your handling code here:
                // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
flag_register=0;
        try {
            //                jTextField4.setText("Welcome");
            //  System.out.println(user);
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SIUD.class.getName()).log(Level.SEVERE, null, ex);
        }
                 this.dispose();
                 
              // new projectjava.LoginPage.c1();
               new dbms.Insert_Screen_2().setVisible(true);        // TODO add your handling code here:
                      // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
flag_register=0;
        try {
            //                jTextField4.setText("Welcome");
            //  System.out.println(user);
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SIUD.class.getName()).log(Level.SEVERE, null, ex);
        }
                 this.dispose();
                 
              // new projectjava.LoginPage.c1();
               new dbms.Delete_Screen_2().setVisible(true);        // TODO add your handling code here:
                      // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void get_waitinglist_city_based_done_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_waitinglist_city_based_done_button1ActionPerformed
flag_register=0;
DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();//'||r_patient.DOCTOR_ID||','||r_patient.USER_ID||','||r_patient.city
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("PATIENT ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("ORGAN REQUIRED");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("REASON");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("CITY");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
//            String value=jTextField6.getText().toString();
String value=get_waitinglist_city_based_textfield.getText();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_city_waiting_patients('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
     for (int i = 0; i < split_coma.length-1; i=i+6) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
         // TODO add your handling code here:
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_waitinglist_city_based_done_button1ActionPerformed

    private void get_user_city_based_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_user_city_based_button1ActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
    
        get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        
//        get_user_city_based_done_button.setVisible(false); 
get_user_city_based_label.setVisible(true);
        get_user_city_based_textfield.setVisible(true);
        get_user_city_based_done_button.setVisible(true);
                
// TODO add your handling code here:
    }//GEN-LAST:event_get_user_city_based_button1ActionPerformed

    private void get_graphs_successActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_graphs_successActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("declare \n" +
"z varchar(100);\n" +
"begin\n" +
"z:=organ_success;\n" +
"dbms_output.put_line(z);\n" +
"end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4]});
            double a=Double.parseDouble(split_coma[0]);
                double b=Double.parseDouble(split_coma[1]);
                double c=Double.parseDouble(split_coma[2]);
                double d=Double.parseDouble(split_coma[3]);
                double e=Double.parseDouble(split_coma[4]);
                DefaultPieDataset  piedataset = new DefaultPieDataset();
            piedataset.setValue("Heart", a);
            piedataset.setValue("Pancreas", b);
            piedataset.setValue("Intestine",c);
            piedataset.setValue("Kidney", d);
            piedataset.setValue("Lungs", e); 
         JFreeChart chart = ChartFactory.createPieChart("SUCCESS RATE(In probability terms)", piedataset, true, true, true);
         PiePlot p = (PiePlot)chart.getPlot();
         
         ChartFrame f = new ChartFrame("pie chart" ,chart);
         f.setVisible(true);
         f.setSize(700,600);
            
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your han
                // TODO add your handling code here:
    }//GEN-LAST:event_get_graphs_successActionPerformed

    private void get_graphs_failureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_graphs_failureActionPerformed
flag_register=0;
DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("declare \n" +
"z varchar(100);\n" +
"begin\n" +
"z:=organ_failure;\n" +
"dbms_output.put_line(z);\n" +
"end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4]});
            double a=Double.parseDouble(split_coma[0]);
                double b=Double.parseDouble(split_coma[1]);
                double c=Double.parseDouble(split_coma[2]);
                double d=Double.parseDouble(split_coma[3]);
                double e=Double.parseDouble(split_coma[4]);
                DefaultPieDataset  piedataset = new DefaultPieDataset();
            piedataset.setValue("Heart", a);
            piedataset.setValue("Pancreas", b);
            piedataset.setValue("Intestine",c);
            piedataset.setValue("Kidney", d);
            piedataset.setValue("Lungs", e); 
         JFreeChart chart = ChartFactory.createPieChart("FAILURE RATE(In probability terms)", piedataset, true, true, true);
         PiePlot p = (PiePlot)chart.getPlot();
         
         ChartFrame f = new ChartFrame("pie chart" ,chart);
         f.setVisible(true);
         f.setSize(700,600);
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your han
                // TODO add your handling code here:
    }//GEN-LAST:event_get_graphs_failureActionPerformed

    private void add_death_to_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_death_to_userActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
            //DEATH_ID	NAME	REASON_OF_DEATH	MEDICAL_HISTORY	MEDICAL_INSURANCE	CITY	STREET	STATE	DATE_OF_BIRTH	DONATE_STATUS	PERSPECTIVE
      JLabel t1=new JLabel();
        
        Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        
        try{
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select count(*) from death_records");
            while(rs.next()){
                int no = rs.getInt(1);
                t1.setText(String.valueOf(Integer.parseInt(rs.getString(1))+1));
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
    
        JPanel panel=new JPanel(new GridLayout(10, 5));
        JTextField t2=new JTextField(10);
        JTextField t3=new JTextField(10);
        JTextField t4=new JTextField(10);
       JTextField t5=new JTextField(10);
        JTextField t6=new JTextField(10);
        JTextField t7=new JTextField(10);
        JTextField t8=new JTextField(10);
        JTextField t9=new JTextField(10);
        JTextField t10=new JTextField(10);
        JLabel l1=new JLabel("DEATH_ID");
        JLabel l2=new JLabel("NAME");
        JLabel l3=new JLabel("REASON_OF_DEATH");
        JLabel l4=new JLabel("MEDICAL_HISTORY");
        JLabel l5=new JLabel("MEDICAL_INSURANCE");
        JLabel l6=new JLabel("CITY");
        JLabel l7=new JLabel("STREET");
        JLabel l8=new JLabel("STATE");
        JLabel l9=new JLabel("DATE_OF_BIRTH");
        JLabel l10=new JLabel("DONATE_STATUS");
        panel.add(l1);
        panel.add(t1);
        
        panel.add(l2);
        panel.add(t2);
        
        panel.add(l3);
        panel.add(t3);
        
        panel.add(l4);
        panel.add(t4);
        
        panel.add(l5);
        panel.add(t5);
        
        panel.add(l6);
        panel.add(t6);
        
        panel.add(l7);
        panel.add(t7);
        
        panel.add(l8);
        panel.add(t8);
        
        panel.add(l9);
        panel.add(t9);
        
        panel.add(l10);
        panel.add(t10);
        
        int t=JOptionPane.showOptionDialog(this, panel,"INSERT INTO DEATH RECORDS",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,null,null,null);
if(t==JOptionPane.OK_OPTION){
    
    
//    System.out.println(t1.getText());
    
//    Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try{
            Statement st = conn.createStatement();

st.execute("insert into death_records values('"+t1.getText()+"','"+t2.getText()+"','"+t3.getText()+"','"+t4.getText()+"','"+t5.getText()+"','"+t6.getText()+"','"+t7.getText()+"','"+t8.getText()+"','"+t9.getText()+"','"+t10.getText()+"','')");
        JOptionPane.showMessageDialog(rootPane, "VALUES INSERTED SUCCESSFULLY!","DONE",JOptionPane.PLAIN_MESSAGE);
 
        }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(rootPane, "Valued Entered in medical insurance should be number","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        catch(SQLException e){
            System.out.println(e.getErrorCode());
            System.out.println(e.getMessage());
            if(e.getErrorCode()==20002){
                JOptionPane.showMessageDialog(rootPane, "Valued Entered in medical insurance should be 0 or 1","ERROR",JOptionPane.ERROR_MESSAGE);
       
            }
            else if(e.getErrorCode()==20001){
                
                JOptionPane.showMessageDialog(rootPane, "Valued Entered in donate status should be 0 or 1 or 2","ERROR",JOptionPane.ERROR_MESSAGE);
       
            }
        }
    
    
}       
            // TODO add your handling code here:
    }//GEN-LAST:event_add_death_to_userActionPerformed

    private void add_new_user_from_deathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_new_user_from_deathActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        //death_id int,organ_donated varchar,reason_of_donation varchar,organization_id int
        
        JPanel panel=new JPanel(new GridLayout(10, 5));
        JTextField t1=new JTextField(10);
        JTextField t2=new JTextField(10);
        JTextField t3=new JTextField(10);
        JTextField t4=new JTextField(10);
        JLabel l1=new JLabel("DEATH_ID");
        JLabel l2=new JLabel("ORGAN_DONATED");
        JLabel l3=new JLabel("REASON_OF_DONATION");
        JLabel l4=new JLabel("ORGANIZATION_ID");
        panel.add(l1);
        panel.add(t1);
        
        panel.add(l2);
        panel.add(t2);
        
        panel.add(l3);
        panel.add(t3);
        
        panel.add(l4);
        panel.add(t4);
        
        int t=JOptionPane.showOptionDialog(this, panel,"INSERT INTO DEATH RECORDS",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,null,null,null);
if(t==JOptionPane.OK_OPTION){
    
    
//    System.out.println(t1.getText());
    
    Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try{
            Statement st = conn.createStatement();

logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        st.executeUpdate("begin  ADD_DEATH_TO_USER('"+t1.getText()+"','"+t2.getText()+"','"+t3.getText()+"','"+t4.getText()+"'); end;"));
String st2=sb.toString();
    String split_coma[]=st2.split(",");
                
JOptionPane.showMessageDialog(rootPane, sb,"DONE",JOptionPane.PLAIN_MESSAGE);
 
    sb.delete(0, sb.length());           
        }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(rootPane, "Valued Entered in death_id,medical insurance,donor_id,organization_id should be number","ERROR",JOptionPane.ERROR_MESSAGE);
        }
       catch(SQLException e){
            System.out.println(e.getErrorCode());
            System.out.println(e.getMessage());
            if(e.getErrorCode()==20002){
                JOptionPane.showMessageDialog(rootPane, "Enter the organ from this list only:Heart,Pancreas,Intestine,Lungs,Kidney","Error",JOptionPane.ERROR_MESSAGE);
         
                
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Please check all values entered","ERROR",JOptionPane.ERROR_MESSAGE);
         
            }
    
}           catch (Exception ex) {
                Logger.getLogger(SIUD.class.getName()).log(Level.SEVERE, null, ex);
            }}       // TODO add your handling code here:
    }//GEN-LAST:event_add_new_user_from_deathActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
flag_register=0;
        try {
            //                jTextField4.setText("Welcome");
            //  System.out.println(user);
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SIUD_employee.class.getName()).log(Level.SEVERE, null, ex);
        }
                 this.dispose();
                 
              // new projectjava.LoginPage.c1();
               new dbms.Homepage_Screen().setVisible(true);        // TODO add your handling code here:
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_logoutActionPerformed

    private void get_success_organizationwise_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_success_organizationwise_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
       get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
    
        get_user_city_based_done_button.setVisible(false); DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("ORGANIZATION NAME");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("SUCCESS RATE");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_get_doctor_transaction_count(conn, () -> 
        s.executeUpdate("begin  GET_SUCCESS_ORGANIZATIONWISE; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
    for (int i = 0; i < split_coma.length-1; i=i+2) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_success_organizationwise_buttonActionPerformed

    private void get_failure_organizationwise_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_failure_organizationwise_buttonActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
         get_graphs_success.setVisible(false);
        get_graphs_failure.setVisible(false);
        get_doctor_transaction_count_ins.setVisible(false);
        get_doctor_transaction_count_all1.setVisible(false);
        get_all_transaction_city_label.setVisible(false);
        get_transactions_city_textfield.setVisible(false);
        get_transactions_city_done_button.setVisible(false);
        get_organ_available_count_citywise_label.setVisible(false);
        get_organ_available_count_citywise_textfield.setVisible(false);
        get_organ_available_count_citywise_done_button.setVisible(false);
        get_patient_list_ins_city_label.setVisible(false);
        get_patient_list_ins_city_textfield.setVisible(false);
        get_patient_list_ins_orgrequired_label.setVisible(false);
        get_patient_list_ins_orgrequired_textfield.setVisible(false);
        get_patient_city_based_done_button.setVisible(false);
        get_user_city_based_label.setVisible(false);
        get_user_city_based_textfield.setVisible(false);
        get_user_city_based_done_button.setVisible(false);
        get_waitinglist_city_based_button.setVisible(false);
        get_waitinglist_all_button.setVisible(false);
        get_waitinglist_city_based_label.setVisible(false);
        get_waitinglist_city_based_textfield.setVisible(false);
//        recover_button.setVisible(false);
    
        get_user_city_based_done_button.setVisible(false); DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("ORGANIZATION NAME");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("FAILURE RATE");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_get_doctor_transaction_count(conn, () -> 
        s.executeUpdate("begin  GET_FAILURE_ORGANIZATIONWISE; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
    for (int i = 0; i < split_coma.length-1; i=i+2) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1]});
            }
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_failure_organizationwise_buttonActionPerformed

    private void get_death_recordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_death_recordsActionPerformed
flag_register=0;
get_graphs_demand.setVisible(false);
        get_graphs_supply.setVisible(false);
        get_graphs_svd.setVisible(false);
    
        DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
        //                   tm.setRowCount(0);
        //DEATH_ID	NAME	REASON_OF_DEATH	MEDICAL_HISTORY	MEDICAL_INSURANCE	CITY	STREET	STATE	DATE_OF_BIRTH	DONATE_STATUS	PERSPECTIVE
        
        tm.setRowCount(0);
jTable2.getColumnModel().getColumn(0).setHeaderValue("DEATH_ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("REASON_OF_DEATH");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("MEDICAL_HISTORY");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("MEDICAL_INSURANCE");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("STREET");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("STATE");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("DOB");
//                   jTable2.getColumnModel().getColumn(9).setHeaderValue("DONATION_STATUS");
                   jTable2.getColumnModel().getColumn(9).setHeaderValue("PERSPECTIVE");
                   jTable2.getTableHeader().resizeAndRepaint();
        Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
            System.out.println("Exception caught --> " + e);
        }
        try{
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select * from death_records");
            ResultSetMetaData meta=rs.getMetaData();
            int numberOfColumns=meta.getColumnCount();
            while(rs.next()){
                Object[] rowData=new Object[numberOfColumns];
                for (int i = 0; i < rowData.length; ++i) {
                    rowData[i]=rs.getObject(i+1);
                }
                tm.addRow(rowData);
            }

        }catch(Exception e){
            e.printStackTrace();
        }        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_get_death_recordsActionPerformed

    private void get_graphs_demandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_graphs_demandActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("declare \n" +
"z varchar(100);\n" +
"begin\n" +
"z:=organ_demand;\n" +
"dbms_output.put_line(z);\n" +
"end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4]});
            double a=Double.parseDouble(split_coma[0]);
                double b=Double.parseDouble(split_coma[1]);
                double c=Double.parseDouble(split_coma[2]);
                double d=Double.parseDouble(split_coma[3]);
                double e=Double.parseDouble(split_coma[4]);
                DefaultPieDataset  piedataset = new DefaultPieDataset();
            piedataset.setValue("Heart", a);
            piedataset.setValue("Pancreas", b);
            piedataset.setValue("Intestine",c);
            piedataset.setValue("Kidney", d);
            piedataset.setValue("Lungs", e); 
         JFreeChart chart = ChartFactory.createPieChart("TOTAL ORGAN REQUIRED", piedataset, true, true, true);
         PiePlot p = (PiePlot)chart.getPlot();
         
         ChartFrame f = new ChartFrame("pie chart" ,chart);
         f.setVisible(true);
         f.setSize(700,600);
            
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your han
        // TODO add your handling code here:
    }//GEN-LAST:event_get_graphs_demandActionPerformed

    private void get_graphs_supplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_graphs_supplyActionPerformed
flag_register=0;
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("declare \n" +
"z varchar(100);\n" +
"begin\n" +
"z:=organ_supply;\n" +
"dbms_output.put_line(z);\n" +
"end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4]});
            double a=Double.parseDouble(split_coma[0]);
                double b=Double.parseDouble(split_coma[1]);
                double c=Double.parseDouble(split_coma[2]);
                double d=Double.parseDouble(split_coma[3]);
                double e=Double.parseDouble(split_coma[4]);
                DefaultPieDataset  piedataset = new DefaultPieDataset();
            piedataset.setValue("Heart", a);
            piedataset.setValue("Pancreas", b);
            piedataset.setValue("Intestine",c);
            piedataset.setValue("Kidney", d);
            piedataset.setValue("Lungs", e); 
         JFreeChart chart = ChartFactory.createPieChart("TOTAL ORGAN PRESENT", piedataset, true, true, true);
         PiePlot p = (PiePlot)chart.getPlot();
         
         ChartFrame f = new ChartFrame("pie chart" ,chart);
         f.setVisible(true);
         f.setSize(700,600);
            
    sb.delete(0, sb.length());
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_graphs_supplyActionPerformed

    private void get_graphs_svdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_graphs_svdActionPerformed
flag_register=0;
    DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("declare \n" +
"z varchar(100);\n" +
"begin\n" +
"z:=organ_supply;\n" +
"dbms_output.put_line(z);\n" +
"end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4],"Supply"});
            
                double a=Double.parseDouble(split_coma[0]);
                double b=Double.parseDouble(split_coma[1]);
                double c=Double.parseDouble(split_coma[2]);
                double d=Double.parseDouble(split_coma[3]);
                double e=Double.parseDouble(split_coma[4]);
               DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.setValue(a, "Supply", "Heart");
dataset.setValue(b, "Supply", "Pancreas");
dataset.setValue(c, "Supply", "Intestine");
dataset.setValue(d, "Supply", "Kidney");
dataset.setValue(e, "Supply", "Lungs");


    sb.delete(0, sb.length());
//
logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("declare \n" +
"z varchar(100);\n" +
"begin\n" +
"z:=organ_demand;\n" +
"dbms_output.put_line(z);\n" +
"end;"));
   st=sb.toString();
   String split_coma2[]=st.split(",");
   
                tm.addRow(new Object[]{split_coma2[0],split_coma2[1],split_coma2[2],split_coma2[3],split_coma2[4],"demand"});
             
                a=Double.parseDouble(split_coma2[0]);
                b=Double.parseDouble(split_coma2[1]);
                c=Double.parseDouble(split_coma2[2]);
                d=Double.parseDouble(split_coma2[3]);
                e=Double.parseDouble(split_coma2[4]);
////               DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.setValue(a, "Demand", "Heart");
dataset.setValue(b, "Demand", "Pancreas");
dataset.setValue(c, "Demand", "Intestine");
dataset.setValue(d, "Demand", "Kidney");
dataset.setValue(e, "Demand", "Lungs");


    sb.delete(0, sb.length());

JFreeChart chart = ChartFactory.createBarChart("Supply And Demand", "Organ","Value", dataset, PlotOrientation.VERTICAL,true,true,false);

CategoryPlot p = chart.getCategoryPlot();

p.setRangeGridlinePaint(Color.black);

ChartFrame frame = new ChartFrame("Bar Chart Report",chart);

frame.setVisible(true);

frame.setSize(650,550);
            
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
     // TODO add your handling code here:
    }//GEN-LAST:event_get_graphs_svdActionPerformed

    private void register_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_register_buttonActionPerformed
flag_register=1;

        DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
        //                   tm.setRowCount(0);
        //DEATH_ID	NAME	REASON_OF_DEATH	MEDICAL_HISTORY	MEDICAL_INSURANCE	CITY	STREET	STATE	DATE_OF_BIRTH	DONATE_STATUS	PERSPECTIVE
        
        tm.setRowCount(0);
//jTable2.getColumnModel().getColumn(0).setHeaderValue("DEATH_ID");
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("NAME");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("PHONE_NO");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DOB");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("MEDICAL_INSURANCE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("MEDICAL_HISTORY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("Street");
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("STATE");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("Adhar");
                   jTable2.getColumnModel().getColumn(9).setHeaderValue("EMAIL");
                   jTable2.getColumnModel().getColumn(10).setHeaderValue("BloodGroup");
                   
//                   jTable2.getColumnModel().getColumn(9).setHeaderValue("DONATION_STATUS");
//                   jTable2.getColumnModel().getColumn(9).setHeaderValue("PERSPECTIVE");
                   jTable2.getTableHeader().resizeAndRepaint();
        Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
            System.out.println("Exception caught --> " + e);
        }
        try{
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select * from register_table");
            ResultSetMetaData meta=rs.getMetaData();
            int numberOfColumns=meta.getColumnCount();
            while(rs.next()){
                Object[] rowData=new Object[numberOfColumns];
                for (int i = 0; i < rowData.length; ++i) {
                    rowData[i]=rs.getObject(i+1);
                }
                tm.addRow(rowData);
            }

        }catch(Exception e){
            e.printStackTrace();
        }        // TODO add your handling code here:


// TODO add your handling code here:
    }//GEN-LAST:event_register_buttonActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
if(flag_register==1){
    
    
        int ok=JOptionPane.showConfirmDialog(rootPane, "Pease confirm to add registered data to user","CONFIRM?",JOptionPane.OK_CANCEL_OPTION);
        if(ok==JOptionPane.OK_OPTION){
    DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        int seletedRowIndex=jTable2.getSelectedRow();
         
            Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
 String death_id= model.getValueAt(seletedRowIndex,8).toString();
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("begin  ADD_REGISTER_TO_DEATH("+death_id+" ); end;"));
     JOptionPane.showMessageDialog(rootPane, "VALUES ENTERED SUCCESSFULLY!","DONE",JOptionPane.PLAIN_MESSAGE);
      
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
}// TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SIUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SIUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SIUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SIUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SIUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_death_to_user;
    private javax.swing.JButton add_new_user_from_death;
    private javax.swing.JLabel get_all_transaction_city_label;
    private javax.swing.JButton get_death_records;
    private javax.swing.JButton get_doctor_transaction_count_all1;
    private javax.swing.JButton get_doctor_transaction_count_button;
    private javax.swing.JButton get_doctor_transaction_count_ins;
    private javax.swing.JButton get_failure_organizationwise_button;
    private javax.swing.JButton get_failure_organwise_button;
    private javax.swing.JButton get_graphs;
    private javax.swing.JButton get_graphs_demand;
    private javax.swing.JButton get_graphs_failure;
    private javax.swing.JButton get_graphs_success;
    private javax.swing.JButton get_graphs_supply;
    private javax.swing.JButton get_graphs_svd;
    private javax.swing.JButton get_organ_available_count_citywise_button;
    private javax.swing.JButton get_organ_available_count_citywise_done_button;
    private javax.swing.JLabel get_organ_available_count_citywise_label;
    private javax.swing.JTextField get_organ_available_count_citywise_textfield;
    private javax.swing.JButton get_patient_city_based_done_button;
    private javax.swing.JButton get_patient_list_ins_button;
    private javax.swing.JLabel get_patient_list_ins_city_label;
    private javax.swing.JTextField get_patient_list_ins_city_textfield;
    private javax.swing.JLabel get_patient_list_ins_orgrequired_label;
    private javax.swing.JTextField get_patient_list_ins_orgrequired_textfield;
    private javax.swing.JButton get_success_organizationwise_button;
    private javax.swing.JButton get_success_organwise_button;
    private javax.swing.JButton get_transactions_city_done_button;
    private javax.swing.JTextField get_transactions_city_textfield;
    private javax.swing.JButton get_user_city_based_button1;
    private javax.swing.JButton get_user_city_based_done_button;
    private javax.swing.JLabel get_user_city_based_label;
    private javax.swing.JTextField get_user_city_based_textfield;
    private javax.swing.JButton get_waitinglist_all_button;
    private javax.swing.JButton get_waitinglist_button;
    private javax.swing.JButton get_waitinglist_city_based_button;
    private javax.swing.JButton get_waitinglist_city_based_done_button1;
    private javax.swing.JLabel get_waitinglist_city_based_label;
    private javax.swing.JTextField get_waitinglist_city_based_textfield;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton logout;
    private javax.swing.JButton recover_button;
    private javax.swing.JButton register_button;
    // End of variables declaration//GEN-END:variables
}
