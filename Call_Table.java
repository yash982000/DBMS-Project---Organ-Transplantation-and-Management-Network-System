/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbms;

import static dbms.oracleDataBAseConnection.logServerOutput;
import java.awt.GridLayout;
import static java.lang.System.exit;
import java.sql.Array;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import static javax.swing.UIManager.getString;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class Call_Table extends javax.swing.JFrame {

    /**
     * Creates new form Call_Table
     */
    public Call_Table() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        scrollPane1 = new java.awt.ScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        get_doctor_transaction_count_insert = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jTextField9 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("EX");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "Title 7", "Title 8", "Title 9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        scrollPane1.add(jScrollPane1);

        jButton2.setText("ADD_DEATH_TO_USER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jTextField3.setText("jTextField3");

        jTextField4.setText("jTextField4");

        jButton3.setText("_get_doctor_transaction_count");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField5.setText("jTextField5");

        get_doctor_transaction_count_insert.setText("get_doctor_transaction_count_insert");
        get_doctor_transaction_count_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_doctor_transaction_count_insertActionPerformed(evt);
            }
        });

        jButton4.setText("GET FAILURE ORgANWISE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("get success orgnwise");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("get organ availibilty city wise");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField6.setText("jTextField6");

        jTextField7.setText("jTextField7");

        jTextField8.setText("jTextField8");

        jButton7.setText("get patient city and organ based");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Get USER CITY BASED");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTextField9.setText("jTextField9");

        jButton9.setText("get waiting list city based");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTextField10.setText("jTextField10");

        jButton10.setText("get waiting list");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton8)
                        .addGap(145, 145, 145))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(48, 48, 48)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(232, 232, 232)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(862, 862, 862)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(240, 240, 240)
                                .addComponent(get_doctor_transaction_count_insert)
                                .addGap(93, 93, 93)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addGap(119, 119, 119)
                                        .addComponent(jButton3)
                                        .addGap(105, 105, 105)
                                        .addComponent(jButton4)))
                                .addGap(38, 38, 38)
                                .addComponent(jButton5)))
                        .addContainerGap(69, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(jButton10)
                    .addContainerGap(1232, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton1)
                            .addComponent(jButton4)
                            .addComponent(jButton5)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(get_doctor_transaction_count_insert)
                        .addGap(27, 27, 27)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton6)
                                    .addComponent(jButton7))
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton9))
                                .addGap(19, 19, 19))))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(808, Short.MAX_VALUE)
                    .addComponent(jButton10)
                    .addGap(44, 44, 44)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 void logServerOutput_ex(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           
                           String[] arrOfStr_n=temp.split("\n");
                           
                           for(String a:arrOfStr_n){
//                               System.out.println("NEW");
//                               System.out.println(a);
                                 String[]  arrOfStr_comma=a.split(",");
                                 for(String b:arrOfStr_comma){
                                     System.out.println(b);
                                 }
                                 tm.addRow(arrOfStr_comma);
                           }
                           
                           
//                           System.out.println(String.valueOf(t).toUpperCase());
//                           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
               Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
 void logServerOutput_add_death_user(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           if(temp.equals("STORED VALUE")){
                               System.out.println("String : "+temp);
                           }
                           else if(temp.equals("DATA NOT FOUND PLEASE CHECK YOUR INPUT AGAIN")){
                               System.out.println("String : "+temp);
                           }
                           
                           
//                           System.out.println(String.valueOf(t).toUpperCase());
//                           throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
               Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
 
                            StringBuffer sb=new StringBuffer();
 
 
 void logServerOutput_get_doctor_transaction_count(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                 
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           String[] arrOfStr=temp.split("\n");

                            for(String a:arrOfStr){
                               sb.append(a).append(",");
                           }
                            
                            
//                           String c=arrOfStr[0].concat(",").concat(arrOfStr[1]).concat(",").concat(arrOfStr[2]).concat(",").concat(arrOfStr[3]).concat(",").concat(arrOfStr[4]).concat(",").concat(arrOfStr[5]);
//                               System.out.println("c"+c);
                         
//                           for (int i = 0; i < g-6; i=i+6) {
//                               String c=arrOfStr[i].concat(",").concat(arrOfStr[i+1]).concat(",").concat(arrOfStr[i+2]).concat(",").concat(arrOfStr[i+3]).concat(",").concat(arrOfStr[i+4]).concat(",").concat(arrOfStr[i+5]);
//                               System.out.println("c"+c);
//                           }
//                           String new_s[]=new String[8];
//System.out.println(temp);
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
//               System.out.println(Stream.of((Object[]) array.getArray(1,g-2)).count());
               Stream.of((Object[]) array.getArray(1,g-2))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed




Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
 
    logServerOutput_ex(conn, () -> 
        s.executeUpdate("begin ex ; end;"));
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
//        int count=0;
       /* try{
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from user1");
            while(rs.next()){
                String user_id = rs.getString(1);
                String pass= rs.getString(2);
                Object o[]={rs.getString("user_id"),rs.getString("name")};
                tm.addRow(o);
            }
          
        }catch(Exception e){
            e.printStackTrace();
        }*/        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed


Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
 int death_id= Integer.parseInt(jTextField1.getText());
 String organ_donated=jTextField2.getText();
 String reason_of_donation=jTextField3.getText();
 int organization_id=Integer.parseInt(jTextField4.getText());
    logServerOutput_add_death_user(conn, () -> 
        s.executeUpdate("begin  ADD_DEATH_TO_USER("+death_id+","+organ_donated+","+reason_of_donation+","+organization_id+"); end;"));
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
//        int count=0;
       /* try{
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from user1");
            while(rs.next()){
                String user_id = rs.getString(1);
                String pass= rs.getString(2);
                Object o[]={rs.getString("user_id"),rs.getString("name")};
                tm.addRow(o);
            }
          
        }catch(Exception e){
            e.printStackTrace();
        }*/        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
public void ChangeName(JTable table,int col_index,String col_name){
    table.getColumnModel().getColumn(col_index).setHeaderValue(col_name);
}
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("DOCTOR NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DOCTOR DEPARTMENT");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("ORGANIZATION");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("HEART");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("PANCREAS");
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("INTESTINE");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("KIDNEY");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("LUNG");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_get_doctor_transaction_count(conn, () -> 
        s.executeUpdate("begin  get_doctor_transaction_count; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
            for (int i = 0; i < split_coma.length-1; i=i+9) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7],split_coma[i+8]});
            }
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
//        int count=0;
       /* try{
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from user1");
            while(rs.next()){
                String user_id = rs.getString(1);
                String pass= rs.getString(2);
                Object o[]={rs.getString("user_id"),rs.getString("name")};
                tm.addRow(o);
            }
          
        }catch(Exception e){
            e.printStackTrace();
        }*/        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void get_doctor_transaction_count_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_doctor_transaction_count_insertActionPerformed
 
        DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("DOCTOR NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DOCTOR DEPARTMENT");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("ORGANIZATION");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("HEART");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("PANCREAS");
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("INTESTINE");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("KIDNEY");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("LUNG");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=jTextField5.getText().toString();
    logServerOutput_get_doctor_transaction_count(conn, () -> 
        s.executeUpdate("begin  get_doctor_transaction_count_p('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
            for (int i = 0; i < split_coma.length-1; i=i+9) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7],split_coma[i+8]});
            }
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_get_doctor_transaction_count_insertActionPerformed

 void logServerOutput_GET_FAILURE_ORGANWISE(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           String[] arrOfStr=temp.split("\n");

                            for(String a:arrOfStr){
                               sb.append(a).append(",");
                           }
                            
                            
//                           String c=arrOfStr[0].concat(",").concat(arrOfStr[1]).concat(",").concat(arrOfStr[2]).concat(",").concat(arrOfStr[3]).concat(",").concat(arrOfStr[4]).concat(",").concat(arrOfStr[5]);
//                               System.out.println("c"+c);
                         
//                           for (int i = 0; i < g-6; i=i+6) {
//                               String c=arrOfStr[i].concat(",").concat(arrOfStr[i+1]).concat(",").concat(arrOfStr[i+2]).concat(",").concat(arrOfStr[i+3]).concat(",").concat(arrOfStr[i+4]).concat(",").concat(arrOfStr[i+5]);
//                               System.out.println("c"+c);
//                           }
//                           String new_s[]=new String[8];
//System.out.println(temp);
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
//               System.out.println(Stream.of((Object[]) array.getArray(1,g-2)).count());
               Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("TOTAL");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("begin  GET_FAILURE_ORGANWISE; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4],split_coma[5]});
            
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("Heart");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("Pancreas");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("Intestine");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("Kidney");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("Lungs");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("TOTAL");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
    logServerOutput_GET_FAILURE_ORGANWISE(conn, () -> 
        s.executeUpdate("begin  GET_SUCCESS_ORGANWISE; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
                tm.addRow(new Object[]{split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4],split_coma[5]});
            
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

 void logServerOutput_get_organ_available_count(
    Connection connection, 
    oracleDataBAseConnection.WhyUNoCheckedExceptionRunnable runnable
) throws Exception {
    try (Statement s = connection.createStatement()) {
       try {
           s.executeUpdate("begin dbms_output.enable(); end;");
           runnable.run();
 
           try (CallableStatement call = connection.prepareCall(
               "declare "
             + "  num integer := 1000;"
             + "begin "
             + "  dbms_output.get_lines(?, num);"
             + "end;"
           )) {
               call.registerOutParameter(1, Types.ARRAY,
                   "DBMSOUTPUT_LINESARRAY");
               call.execute();
 
               Array array = null;
               try {
                   DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   
                   array = call.getArray(1);
//                   System.out.println(array);
                   
//                   System.out.println(Stream.of((Object[]) array.getArray()).count());//to get count of number of lines
//                         .forEach(System.out::println);
//                   System.out.println(array.getArray());
// Object o[]={rs.getString("user_id"),rs.getString("name")};
//String g =String.valueOf((Object[]) array.getArray(2,2));
//                   System.out.println("HERE"+g);
int g=(int) Stream.of((Object[]) array.getArray()).count();
//                tm.addColumn("user",(Object[]) array.getArray(1,g-1));
                
//                Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
//                         .forEach(System.out::println);
                
               Consumer<Object> ChangeToJDBC=new Consumer<Object>(){
                  
                       @Override
                       public void accept(Object t) {
                           String temp=String.valueOf(t);
                           String[] arrOfStr=temp.split("\n");

                            for(String a:arrOfStr){
                               sb.append(a).append(",");
                           }
                            
                            
//                           String c=arrOfStr[0].concat(",").concat(arrOfStr[1]).concat(",").concat(arrOfStr[2]).concat(",").concat(arrOfStr[3]).concat(",").concat(arrOfStr[4]).concat(",").concat(arrOfStr[5]);
//                               System.out.println("c"+c);
                         
//                           for (int i = 0; i < g-6; i=i+6) {
//                               String c=arrOfStr[i].concat(",").concat(arrOfStr[i+1]).concat(",").concat(arrOfStr[i+2]).concat(",").concat(arrOfStr[i+3]).concat(",").concat(arrOfStr[i+4]).concat(",").concat(arrOfStr[i+5]);
//                               System.out.println("c"+c);
//                           }
//                           String new_s[]=new String[8];
//System.out.println(temp);
                       }

                       @Override
                       public Consumer<Object> andThen(Consumer<? super Object> after) {
                           return Consumer.super.andThen(after); //To change body of generated methods, choose Tools | Templates.
                       }
               };
//               System.out.println(Stream.of((Object[]) array.getArray(1,g-2)).count());
               Stream.of((Object[]) array.getArray(1,g-1))//(i,1)
                         .forEach(ChangeToJDBC);
//                   String g=Stream.of((Object[]) array.getArray(2,1)).forEach(true);
               }
               finally {
                   if (array != null)
                       System.out.println("");;
               }
           }
       }
       finally {
           s.executeUpdate("begin dbms_output.disable(); end;");
       }
   }
}
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("HEART");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("PANCREAS");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("INTESTINE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("KIDNEY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("LUNG");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=jTextField6.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_organ_available_count('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
             tm.addRow(new Object[]{value,split_coma[0],split_coma[1],split_coma[2],split_coma[3],split_coma[4]});
            
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);//r_user.user_id||','||r_user.name||','||r_user.date_of_birth||','||r_user.medical_insurance||','||r_user.medical_history||','||r_user.street||','||r_user.city||','||r_user.state
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DATE OF BIRTH");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("MEDICAL INSRUANCE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("MEDICAL HISTORY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("STREET");                  
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("STATE");
                   jTable2.getColumnModel().getColumn(8).setHeaderValue("ORGAN REQUIRED");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value1=jTextField8.getText().toString();
            String value2=jTextField7.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_patient_city_based('"+value1+"','"+value2+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
             for (int i = 0; i < split_coma.length-1; i=i+9) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7],split_coma[i+8]});
            }
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
                   tm.setRowCount(0);
                    jTable2.getColumnModel().getColumn(0).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("NAME");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("DATE OF BIRTH");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("MEDICAL INSRUANCE");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("MEDICAL HISTORY");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("STREET");                  
                   jTable2.getColumnModel().getColumn(6).setHeaderValue("CITY");
                   jTable2.getColumnModel().getColumn(7).setHeaderValue("STATE");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=jTextField9.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_user_city_based('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
     for (int i = 0; i < split_coma.length-1; i=i+8) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5],split_coma[i+6],split_coma[i+7]});
            }
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
 DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();//'||r_patient.DOCTOR_ID||','||r_patient.USER_ID||','||r_patient.city
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("PATIENT ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("ORGAN REQUIRED");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("REASON");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("CITY");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
            String value=jTextField10.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_city_waiting_patients('"+value+"'); end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
     for (int i = 0; i < split_coma.length-1; i=i+6) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5]});
            }
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();//'||r_patient.DOCTOR_ID||','||r_patient.USER_ID||','||r_patient.city
                   tm.setRowCount(0);
                   jTable2.getColumnModel().getColumn(0).setHeaderValue("PATIENT ID");
                   jTable2.getColumnModel().getColumn(1).setHeaderValue("ORGAN REQUIRED");
                   jTable2.getColumnModel().getColumn(2).setHeaderValue("REASON");
                   jTable2.getColumnModel().getColumn(3).setHeaderValue("DOCTOR ID");
                   jTable2.getColumnModel().getColumn(4).setHeaderValue("USER ID");
                   jTable2.getColumnModel().getColumn(5).setHeaderValue("CITY");
                   jTable2.getTableHeader().resizeAndRepaint();
                  
Connection conn = null;
        try{
            String driverName = "oracle.jdbc.OracleDriver";
            Class.forName(driverName);
            String serverName = "LAPTOP-CAL2CB75";
            String serverPort = "1522";
            String sid = "XE";
            String url = "jdbc:oracle:thin:@" + serverName +":" + serverPort + ":" + sid;
            String username = "VARSHIL";
            String password = "admin";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Successful login");
        }catch(Exception e){
           System.out.println("Exception caught --> " + e); 
        }
        try (
     Statement s = conn.createStatement()) {
//            String value=jTextField6.getText().toString();
    logServerOutput_get_organ_available_count(conn, () -> 
        s.executeUpdate("begin  get_waiting_patients; end;"));
    String st=sb.toString();
    String split_coma[]=st.split(",");
     for (int i = 0; i < split_coma.length-1; i=i+6) {
                tm.addRow(new Object[]{split_coma[i],split_coma[i+1],split_coma[i+2],split_coma[i+3],split_coma[i+4],split_coma[i+5]});
            }
    sb=null;
}       catch (SQLException ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Call_Table.class.getName()).log(Level.SEVERE, null, ex);
        }
         // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        int seletedRowIndex=jTable2.getSelectedRow();
        
        JPanel panel=new JPanel(new GridLayout(10, 5));
        JTextField t1=new JTextField(10);
        JTextField t2=new JTextField(10);
        JTextField t3=new JTextField(10);
        JTextField t4=new JTextField(10);
        JLabel l1=new JLabel("name");
        t1.setText(model.getValueAt(seletedRowIndex,0).toString());
        t2.setText(model.getValueAt(seletedRowIndex,1).toString());
        t3.setText(model.getValueAt(seletedRowIndex,2).toString());
        t4.setText(model.getValueAt(seletedRowIndex,3).toString());
        panel.add(l1);
        panel.add(t1);
        panel.add(t2);
        panel.add(t3);
        panel.add(t4);
        int t=JOptionPane.showOptionDialog(this, panel,"Update the values",JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,null,null,null);
if(t==JOptionPane.OK_OPTION){
    System.out.println("Done");
}        
else{
   }
// TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked
//get_doctor_transaction_count
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Call_Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Call_Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Call_Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Call_Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Call_Table().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton get_doctor_transaction_count_insert;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private java.awt.ScrollPane scrollPane1;
    // End of variables declaration//GEN-END:variables
}
